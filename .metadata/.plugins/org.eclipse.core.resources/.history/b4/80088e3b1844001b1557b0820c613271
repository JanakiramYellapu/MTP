package com.ontology;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.InfModel;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.reasoner.Reasoner;
import org.apache.jena.reasoner.ReasonerRegistry;
import org.apache.jena.riot.RDFDataMgr;


public class SurvOnt implements IModel{
	private Model schema, data, dataModel;
	private List<String> queries;
	private String namespace;
	private String schemaFileName, dataFileName;
	public  SurvOnt(String schemaFileName, String dataFileName, String namespace, List<String> queries) {
		this.schemaFileName = schemaFileName;
		this.dataFileName = dataFileName;
    	this.queries = queries;
    	this.namespace = namespace;
    	this.dataModel = ModelFactory.createDefaultModel();
    	this.schema = RDFDataMgr.loadModel(this.schemaFileName);
    	// uncomment to run on fullModel 
//    	this.data   = RDFDataMgr.loadModel(this.dataFileName);
	}
		

	
	@Override
	public void createDataModel() {
//		String subject = "space1";
//		String predicate = "containsBed";
//		String object = "bed1";
		addStatements();
		this.dataModel.setNsPrefix("imprint", this.namespace );
		
		Resource subjectRes = createResource(subject);
		Property predicateProp = this.schema.getProperty(this.namespace +predicate);
		Resource objectRes = createResource(object);
		
		dataModel.add(subjectRes, predicateProp, objectRes );
		
		try {
			FileWriter out = new FileWriter(this.dataFileName);
			this.dataModel.write(out , "RDF/XML");
			out.close();
			this.data   = RDFDataMgr.loadModel(this.dataFileName);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Data Model creation has failed.");
		}
		
		
	}
	
	private ArrayList<ArrayList<String>> addStatements(){
		ArrayList<ArrayList<String>> statements = new ArrayList<ArrayList<String>>();
		statements.add(new ArrayList<String>(Arrays.asList("space1", "containsBed", "bed1")));
		statements.add(new ArrayList<String>(Arrays.asList("space1", "containsTable", "table1")));
		statements.add(new ArrayList<String>(Arrays.asList("space1", "containsPillow", "pillow1")));
		statements.add(new ArrayList<String>(Arrays.asList("space1", "containsPillow", "pillow2")));
		statements.add(new ArrayList<String>(Arrays.asList("bed1", "on", "floor1")));
		statements.add(new ArrayList<String>(Arrays.asList("table1", "on", "floor1")));
		return statements;
	}
	private Resource createResource(String name) {
		return this.dataModel.createResource(this.namespace + name);
	}
	
	
	private Property createProperty(String name) {
		return this.dataModel.createProperty(this.namespace + name);
	}
	
	
	private Literal createLiteral(String name) {
		return this.dataModel.createLiteral(name);
	}
	

	@Override
	public Model intiateInference() {
		Reasoner reasoner = ReasonerRegistry.getOWLReasoner();
		reasoner = reasoner.bindSchema(this.schema);
    	InfModel infModel = ModelFactory.createInfModel(reasoner, this.data);
		return infModel;
	}

	@Override
	public String query(int queryNumber, Model model) {
		
		String queryString = this.queries.get(queryNumber);
    	Query query = QueryFactory.create(queryString);
    	QueryExecution qexec = QueryExecutionFactory.create(query, model);
    	ResultSet results =  qexec.execSelect();
    	String result = "";
    	try {
			while(results.hasNext() ) {
				QuerySolution soln =  results.nextSolution();
				RDFNode spaceName = soln.get("space");
				RDFNode objectName = soln.get("object");
				result += spaceName + " -----> " + objectName + "\n" ;
//				result += soln.toString() + "\n";
			}
		} 
    	finally {
    		qexec.close();
    	}
		return result;
	}
	
}
