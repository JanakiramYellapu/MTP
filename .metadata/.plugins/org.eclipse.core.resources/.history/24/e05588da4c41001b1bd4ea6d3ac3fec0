package com.ontology;


import java.io.InputStream;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.*;
import org.apache.jena.vocabulary.*;
import org.apache.jena.riot.Lang;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.reasoner.Reasoner;
import org.apache.jena.reasoner.ReasonerRegistry;
import org.apache.jena.util.FileManager;

public class App 
{
    public static void main( String[] args )
    {
    	final String inputFileName  = "/home/janakiram/IITM/Project/Jena/SurOntology/src/Files/Ontologydemo.owl";
    	final String objProperty = "http://www.semanticweb.org/janakiram/ontologies/2020/9/ontologyDemo#hasPillowCount";
    	final String bed = "http://www.semanticweb.org/janakiram/ontologies/2020/9/ontologyDemo#bed1";
//    	// create an empty model
//    	 Model model = ModelFactory.createDefaultModel();    	 
//    	 
//    	 readModel(model, inputFileName);
//    	
//    	 // write it to standard out
//    	 writeModel(model);
    	Model schema = RDFDataMgr.loadModel(inputFileName);
    	Model data = RDFDataMgr.loadModel(inputFileName);
    	Reasoner reasoner = ReasonerRegistry.getOWLMiniReasoner();
    	reasoner = reasoner.bindSchema(schema);
    	InfModel infmodel = ModelFactory.createInfModel(reasoner, data);
    	sparql(infmodel);
    }
    
    private static void sparql(Model model) {
    	String queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>"
    			+ "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
    			+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
    			+ "PREFIX imprint: <http://www.semanticweb.org/janakiram/ontologies/2020/9/ontologyDemo#>"
    			+ "SELECT  ?x ?z  WHERE {"
    			+ "?x imprint:containsFloor ?y ."
    			+ "?x imprint:containsObject ?z ."
    			+ "?y imprint:on ?z."
//    			+ "	FILTER regex(str(?x), \".*space1.*\")"
    			+ "}"
    			+ "ORDER BY ?x ?z";
    	
    	System.out.println("Query"+ queryString);
    	Query query = QueryFactory.create(queryString);
    	QueryExecution qexec = QueryExecutionFactory.create(query, model);
    	ResultSet results =  qexec.execSelect();
    	try {
			while(results.hasNext() ) {
				QuerySolution soln =  results.nextSolution();
				Resource spaceName = soln.getResource("x");
				Resource objectName = soln.getResource("z");
				System.out.println(spaceName + "      ---->      " + objectName);
			}
		} 
    	finally {
    		qexec.close();
    	}
    }
    
    private static void readModel(Model model, String inputFileName) {
    	 // use the RDFDataMgr to find the input file
    	InputStream in = RDFDataMgr.open( inputFileName );
    	if (in == null) {
    	    throw new IllegalArgumentException(
    	                                 "File: " + inputFileName + " not found");
    	}

    	// read the RDF/XML file
    	model.read(in, null);
    }
    
    private static void writeModel(Model model) {
    	model.write(System.out);
    }
}
